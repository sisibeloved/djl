plugins {
    id 'application'
    id 'jacoco'
}

dependencies {
    api "commons-cli:commons-cli:${commons_cli_version}"
    api "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_slf4j_version}"
    api project(":basicdataset")
    api project(":model-zoo")
    api project(":testing")
    api("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }

    runtimeOnly project(":mxnet:mxnet-model-zoo")
    runtimeOnly "ai.djl.mxnet:mxnet-native-auto:${mxnet_version}"
    runtimeOnly project(":pytorch:pytorch-model-zoo")
    runtimeOnly "ai.djl.pytorch:pytorch-native-auto:${pytorch_version}"
    runtimeOnly project(":tensorflow:tensorflow-model-zoo")
    runtimeOnly "ai.djl.tensorflow:tensorflow-native-auto:${tensorflow_version}"
    runtimeOnly project(":onnxruntime:onnxruntime-engine")
}

task copyDependencies(type: Copy) {
    into "build/dependencies"
    from configurations.runtime
}

application {
    mainClassName = System.getProperty("main", "ai.djl.integration.IntegrationTest")
}

run {
    environment("TF_CPP_MIN_LOG_LEVEL", "1") // turn off TensorFlow print out
    systemProperties System.getProperties()
    systemProperties.remove("user.dir")
    systemProperty("file.encoding", "UTF-8")
    jvmArgs "-Xverify:none"
}

jacocoTestReport {
    group = "Reporting"
    getSourceDirectories().from(files())
    getClassDirectories().from(files())

    javaProjects().findAll { p ->
        ![":mxnet:jnarator", ":tensorflow:engine", ":examples"].contains(p.getPath())
    }.each { p ->
        additionalSourceDirs files((Set<File>) p.sourceSets.main.allJava.srcDirs)
        additionalClassDirs((FileCollection) p.sourceSets.main.output)
    }

    reports {
        xml.enabled true
        csv.enabled false
    }

    // Work-around to allow us to build list of executionData files in doFirst
    onlyIf = {
        true
    }
}

task debugEnv(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperties System.getProperties()
    systemProperties.remove("user.dir")
    systemProperties.put("ai.djl.logging.level", "debug")
    main = "ai.djl.integration.util.DebugEnvironment"
}

tasks.distTar.enabled = false
test.finalizedBy project.tasks.jacocoTestReport, project.tasks.jacocoTestCoverageVerification

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                if (["PyTorch", "TensorFlow"].contains(System.getProperty("ai.djl.default_engine"))) {
                    minimum = 0.6
                } else {
                    minimum = 0.7
                }
            }
        }
    }
}
