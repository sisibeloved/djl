import groovy.xml.QName

plugins {
    id "java-platform"
    id "maven-publish"
    id 'signing'
}

group = "ai.djl"
boolean isRelease = project.hasProperty("release") || project.hasProperty("staging")
version = "${djl_version}" + (isRelease ? "" : "-SNAPSHOT")

dependencies {
    constraints {
        api "ai.djl:api:${version}"
        api "ai.djl:basicdataset:${version}"
        api "ai.djl:model-zoo:${version}"
        api "ai.djl:serving:${version}"
        api "ai.djl.mxnet:mxnet-engine:${version}"
        api "ai.djl.mxnet:mxnet-model-zoo:${version}"
        api "ai.djl.mxnet:mxnet-native-auto:${mxnet_version}"
        api "ai.djl.mxnet:mxnet-native-mkl:${mxnet_version}"
        api "ai.djl.mxnet:mxnet-native-cu101mkl:${mxnet_version}"
        api "ai.djl.mxnet:mxnet-native-cu102mkl:${mxnet_version}"
        api "ai.djl.tensorflow:tensorflow-api:${version}"
        api "ai.djl.tensorflow:tensorflow-engine:${version}"
        api "ai.djl.tensorflow:tensorflow-model-zoo:${version}"
        api "ai.djl.tensorflow:tensorflow-native-auto:${tensorflow_version}"
        api "ai.djl.tensorflow:tensorflow-native-cpu:${tensorflow_version}"
        api "ai.djl.tensorflow:tensorflow-native-cu101:${tensorflow_version}"
        api "ai.djl.pytorch:pytorch-engine:${version}"
        api "ai.djl.pytorch:pytorch-model-zoo:${version}"
        api "ai.djl.pytorch:pytorch-native-auto:${pytorch_version}"
        api "ai.djl.pytorch:pytorch-native-cpu:${pytorch_version}"
        api "ai.djl.pytorch:pytorch-native-cu101:${pytorch_version}"
        api "ai.djl.pytorch:pytorch-native-cu102:${pytorch_version}"
        api "ai.djl.pytorch:pytorch-native-cu110:${pytorch_version}"
        api "ai.djl.pytorch:pytorch-native-cpu-precxx11:${pytorch_version}"
        api "ai.djl.onnxruntime:onnxruntime-engine:${version}"
        api "ai.djl.dlr:dlr-engine:${version}"
        api "ai.djl.dlr:dlr-native-auto:${dlr_version}"
        api "ai.djl.dlr:dlr-native-cpu:${dlr_version}"
        api "ai.djl.aws:aws-ai:${version}"
        api "ai.djl.fasttext:fasttext-engine:${version}"
        api "ai.djl.hadoop:hadoop:${version}"
        api "ai.djl.sentencepiece:sentencepiece:${version}"
    }
}

project.tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

signing {
    required(project.hasProperty("staging") || project.hasProperty("snapshot"))
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

publishing {
    publications {
        create("bom", MavenPublication) {
            from(components["javaPlatform"])

            pom {
                name = "DJL Bill of Materials (BOM)"
                description = "Deep Java Library (DJL) Bill of Materials (BOM)"
                url = "http://www.djl.ai/bom"
                packaging = "pom"

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                scm {
                    connection = "scm:git:git@github.com:awslabs/djl.git"
                    developerConnection = "scm:git:git@github.com:awslabs/djl.git"
                    url = "https://github.com/awslabs/djl"
                    tag = "HEAD"
                }

                developers {
                    developer {
                        name = "DJL.AI Team"
                        email = "djl-dev@amazon.com"
                        organization = "Amazon AI"
                        organizationUrl = "https://amazon.com"
                    }
                }

                withXml {
                    Node pomNode = asNode()
                    Node dependencies = pomNode.dependencyManagement.dependencies.get(0)
                    addDependency(dependencies, "ai.djl.mxnet", "mxnet-native-mkl", "osx-x86_64", "${mxnet_version}")
                    addDependency(dependencies, "ai.djl.mxnet", "mxnet-native-mkl", "linux-x86_64", "${mxnet_version}")
                    addDependency(dependencies, "ai.djl.mxnet", "mxnet-native-mkl", "win-x86_64", "${mxnet_version}")
                    addDependency(dependencies, "ai.djl.mxnet", "mxnet-native-cu101", "linux-x86_64", "${mxnet_version}")
                    addDependency(dependencies, "ai.djl.mxnet", "mxnet-native-cu102", "linux-x86_64", "${mxnet_version}")
                    addDependency(dependencies, "ai.djl.pytorch", "pytorch-native-cpu", "osx-x86_64", "${pytorch_version}")
                    addDependency(dependencies, "ai.djl.pytorch", "pytorch-native-cpu", "linux-x86_64", "${pytorch_version}")
                    addDependency(dependencies, "ai.djl.pytorch", "pytorch-native-cpu", "win-x86_64", "${pytorch_version}")
                    addDependency(dependencies, "ai.djl.pytorch", "pytorch-native-cpu-precxx11", "linux-x86_64", "${pytorch_version}")
                    addDependency(dependencies, "ai.djl.pytorch", "pytorch-native-cu101", "linux-x86_64", "${pytorch_version}")
                    addDependency(dependencies, "ai.djl.pytorch", "pytorch-native-cu101", "win-x86_64", "${pytorch_version}")
                    addDependency(dependencies, "ai.djl.pytorch", "pytorch-native-cu102", "linux-x86_64", "${pytorch_version}")
                    addDependency(dependencies, "ai.djl.pytorch", "pytorch-native-cu102", "win-x86_64", "${pytorch_version}")
                    addDependency(dependencies, "ai.djl.tensorflow", "tensorflow-native-cpu", "osx-x86_64", "${tensorflow_version}")
                    addDependency(dependencies, "ai.djl.tensorflow", "tensorflow-native-cpu", "linux-x86_64", "${tensorflow_version}")
                    addDependency(dependencies, "ai.djl.tensorflow", "tensorflow-native-cpu", "win-x86_64", "${tensorflow_version}")
                    addDependency(dependencies, "ai.djl.tensorflow", "tensorflow-native-cu101", "linux-x86_64", "${tensorflow_version}")
                }
            }
        }
    }

    repositories {
        maven {
            if (project.hasProperty("snapshot")) {
                name = "snapshot"
                url = "https://oss.sonatype.org/content/repositories/snapshots/"
                credentials {
                    username = findProperty("ossrhUsername")
                    password = findProperty("ossrhPassword")
                }
            } else if (project.hasProperty("staging")) {
                name = "staging"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = findProperty("ossrhUsername")
                    password = findProperty("ossrhPassword")
                }
            } else {
                name = "local"
                url = "build/repo"
            }
        }
    }
}

def addDependency(Node parent, String groupId, String artifactId, String classifier, String version) {
    QName name = new QName("http://maven.apache.org/POM/4.0.0", "dependency")
    Node dep = new Node(parent, name)
    addNode(dep, "groupId", groupId)
    addNode(dep, "artifactId", artifactId)
    addNode(dep, "classifier", classifier)
    addNode(dep, "version", version)
}

def addNode(Node parent, String name, String value) {
    QName qName = new QName("http://maven.apache.org/POM/4.0.0", name)
    Node node = new Node(parent, qName, new NodeList())
    node.value().add(value)
}

